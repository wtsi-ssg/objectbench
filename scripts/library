#License
#=======
#  Copyright (c) 2014 Genome Research Ltd. 
#
#  Author: James Beal <James.Beal@sanger.ac.uk>
#
#This file is part of Objectbench. 
#
#  Objectbench is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. 
#  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. 
#  You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 
#

function two_phase_test {
cd $OBJECT_BENCH_HOME
echo "Persting errors to database"
OBJECT_BENCH_REQUE_ON_FAILURE="false" bundle exec rake object_bench:persist_resque_errors
echo "clearing errors"
bundle exec rake object_bench:delete_resque_errors
export OBJECTBENCH_TAG="Test_run_${OBJECTBENCH_SYSTEM_UNDER_TEST}_bulk_write_$$_${OBJECTBENCH_RUN_NAME}"
export OBJECTBENCH_TAG_PHASE1=${OBJECTBENCH_TAG}
echo "Tagging tests as ${OBJECTBENCH_TAG}"
echo closing floodgates
rake object_bench:close_floodgate
bundle exec rake object_bench:add_initial_writes
echo opening floodgates
rake object_bench:open_floodgate
bundle exec rake object_bench:wait_for_stable
echo "Persting errors to database"
bundle exec rake object_bench:persist_resque_errors
#write_errors
echo "Loading tests"
echo closing floodgates
rake object_bench:close_floodgate
# Reads should come from the run we have just completed.
export OBJECTBENCH_TAG_READ=${OBJECTBENCH_TAG}
export OBJECTBENCH_TAG="Test_run_${OBJECTBENCH_SYSTEM_UNDER_TEST}_phase_two_$$_${OBJECTBENCH_RUN_NAME}"
bundle exec rake object_bench:load_tests
echo opening floodgates
rake object_bench:open_floodgate
echo "Test Tagged as ${OBJECTBENCH_TAG}"
bundle exec rake object_bench:wait_for_stable
echo "Persting errors to database"
OBJECT_BENCH_REQUE_ON_FAILURE="false" bundle exec rake object_bench:persist_resque_errors
echo "Test Tagged as ${OBJECTBENCH_TAG}"
#write_errors
}

function setup_two_read_write_test {
# A vaiable used to make listing the files in this function simpler.
export OB_D_BASE="/local/scratch01/jb23/src_files/"
export OB_D_CENTRAL="/warehouse/isg_wh_scratch01/users/jb23/object_test"
export OBJECTBENCH_RESULTS=$OBJECT_BENCH_HOME/results
# OBJECTBENCH_INITAL_FILES is the list of files used for writes to the object
# store in the first first phase of the tests. These files are read as part
# of the second phase. Alternatively this phase can be used to fill the 
# object store up to a specific amount before  running any tests.
#
# OBJECTBENCH_INITAL_DISTRIBUTION this is used to specify how many of each of
# the files in OBJECTBENCH_INITAL_FILES is placed in to the object store for
# example "1,2,3,4,5,6,7" would store one of the first file, two of the 
# second etc.
export OBJECTBENCH_INITAL_DISTRIBUTION="86, 103, 68, 113, 588, 405, 140, 29, 137, 117, 3"
export OBJECTBENCH_INITAL_FILES="${OB_D_BASE}/zero_length \
                                 ${OB_D_BASE}/11166_2#168.bai \
                                 ${OB_D_BASE}/11128_8#0_phix.flagstat \
                                 ${OB_D_BASE}/11330_1#19.bamcheck  \
                                 ${OB_D_BASE}/11304_1#86_phix_quality_error.txt \
                                 ${OB_D_BASE}/11310_2#56_phix_quality_cycle_surv.txt 
                                 ${OB_D_BASE}/6320_5.bai \
                                 ${OB_D_BASE}/6244_1#9.bam \
                                 ${OB_D_BASE}/6350_4#1.bam \
                                 ${OB_D_BASE}/11149_5#12.cram \
                                 ${OB_D_BASE}/7231_1#146.bam"
# This is the approximate distribution of file sizes in the main test
export OBJECTBENCH_TEST_WRITE_DISTRIBUTION="$OBJECTBENCH_INITAL_DISTRIBUTION"
# This is the distribution of Write,reads and partial reads
export OBJECTBENCH_TEST_WORKLOAD_DISTRIBUTION="600,300,100"
# This is the default tag of the run hopefully with the name of the subject 
# included.
export OBJECTBENCH_TAG="Test_run_${OBJECTBENCH_SYSTEM_UNDER_TEST}_$$"
# If a job fails then create a new job like the one that died.
export OBJECT_BENCH_REQUE_ON_FAILURE="true"
 }

function run_single_test {
cd $OBJECT_BENCH_HOME
echo "Persting errors to database"
OBJECT_BENCH_REQUE_ON_FAILURE="false" bundle exec rake object_bench:persist_resque_errors
echo "clearing errors"
bundle exec rake object_bench:delete_resque_errors
export OBJECTBENCH_TAG="Test_run_${OBJECTBENCH_SYSTEM_UNDER_TEST}_bulk_write_$$_${OBJECTBENCH_RUN_NAME}"
echo "Tagging tests as ${OBJECTBENCH_TAG}"
echo closing floodgates
rake object_bench:close_floodgate
bundle exec rake object_bench:add_initial_writes
echo opening floodgates
rake object_bench:open_floodgate
bundle exec rake object_bench:wait_for_stable
echo closing floodgates
rake object_bench:close_floodgate
echo "Persting errors to database"
OBJECT_BENCH_REQUE_ON_FAILURE="false" bundle exec rake object_bench:persist_resque_errors
echo "clearing errors"
bundle exec rake object_bench:delete_resque_errors
}

function write_errors {
echo "Fetching results"
bundle exec rake object_bench:display_report > $OBJECTBENCH_RESULTS/results_${OBJECTBENCH_TAG}
OBJECTBENCH_TAG=${OBJECTBENCH_TAG_PHASE1} bundle exec rake object_bench:display_report > $OBJECTBENCH_RESULTS/results_${OBJECTBENCH_TAG_PHASE1}
echo "Fetching errors"
bundle exec rake object_bench:display_historic_errors > $OBJECTBENCH_RESULTS/errors_${OBJECTBENCH_TAG}
OBJECTBENCH_TAG=${OBJECTBENCH_TAG_PHASE1} bundle exec rake object_bench:display_historic_errors > $OBJECTBENCH_RESULTS/errors_${OBJECTBENCH_TAG_PHASE1}
echo "Fetching stats"
bundle exec rake object_bench:stats_report > $OBJECTBENCH_RESULTS/stats_${OBJECTBENCH_TAG}
OBJECTBENCH_TAG=${OBJECTBENCH_TAG_PHASE1} bundle exec rake object_bench:stats_report > $OBJECTBENCH_RESULTS/stats_${OBJECTBENCH_TAG_PHASE1}

}
